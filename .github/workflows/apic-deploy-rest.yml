name: APIC Deploy via REST
on:
  workflow_dispatch:
    inputs:
      api_file:
        description: "Path to API YAML"
        default: "apis/hello-proxy.yaml"
        required: true
      product_file:
        description: "Path to Product YAML (optional)"
        default: "products/hello-product.yaml"
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APIC_BASE: ${{ secrets.APIC_BASE }}
      APIC_USERNAME: ${{ secrets.APIC_USERNAME }}
      APIC_PASSWORD: ${{ secrets.APIC_PASSWORD }}
      APIC_ORG: ${{ secrets.APIC_ORG }}
      APIC_CATALOG: ${{ secrets.APIC_CATALOG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show inputs
        run: |
          echo "API:      ${{ github.event.inputs.api_file }}"
          echo "Product:  ${{ github.event.inputs.product_file }}"

      - name: Get Bearer token
        id: token
        run: |
          set -euo pipefail
          # Typical token endpoint for Manager in Hybrid APIC
          TOKEN_URL="${APIC_BASE}/api/token"
          RESP=$(curl -fsS -X POST "$TOKEN_URL" \
            -H 'Content-Type: application/json' \
            --data "{\"username\":\"${APIC_USERNAME}\",\"password\":\"${APIC_PASSWORD}\"}")
          ACCESS_TOKEN=$(echo "$RESP" | jq -r '.access_token // .token // empty')
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Token response was: $RESP"
            echo "::error::Could not obtain access token"
            exit 1
          fi
          echo "token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Create/Update Draft API
        env:
          TOKEN: ${{ steps.token.outputs.token }}
        run: |
          set -euo pipefail
          API_FILE="${{ github.event.inputs.api_file }}"
          # Draft API create (replace if exists)
          # Common endpoint patterns in APIC v10 Manager:
          #   POST /api/orgs/{org}/drafts/draft-apis
          #   PUT  /api/orgs/{org}/drafts/draft-apis/{name}:{version}
          CREATE_URL="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/draft-apis?replace=true"
          curl -fsS -X POST "$CREATE_URL" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/yaml" \
            --data-binary @"$API_FILE" \
            -o /tmp/draft-api.json
          cat /tmp/draft-api.json | jq .

      - name: Create/Update Draft Product (optional)
        if: ${{ github.event.inputs.product_file != '' }}
        env:
          TOKEN: ${{ steps.token.outputs.token }}
        run: |
          set -euo pipefail
          PRODUCT_FILE="${{ github.event.inputs.product_file }}"
          CREATE_URL="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/draft-products?replace=true"
          curl -fsS -X POST "$CREATE_URL" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/yaml" \
            --data-binary @"$PRODUCT_FILE" \
            -o /tmp/draft-product.json
          cat /tmp/draft-product.json | jq .

      - name: Publish Product to catalog (contains the API)
        if: ${{ github.event.inputs.product_file != '' }}
        env:
          TOKEN: ${{ steps.token.outputs.token }}
        run: |
          set -euo pipefail
          PRODUCT_FILE="${{ github.event.inputs.product_file }}"
          # Catalog publish endpoint pattern:
          #   POST /api/catalogs/{org}/{catalog}/products
          PUB_URL="${APIC_BASE}/api/catalogs/${APIC_ORG}/${APIC_CATALOG}/products?stage=true"
          curl -fsS -X POST "$PUB_URL" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/yaml" \
            --data-binary @"$PRODUCT_FILE" \
            -o /tmp/publish.json
          cat /tmp/publish.json | jq .

      - name: Publish API directly (if no product)
        if: ${{ github.event.inputs.product_file == '' }}
        env:
          TOKEN: ${{ steps.token.outputs.token }}
        run: |
          set -euo pipefail
          # If you skip Product, some environments allow API publish to catalog:
          #   POST /api/catalogs/{org}/{catalog}/apis
          API_FILE="${{ github.event.inputs.api_file }}"
          PUB_URL="${APIC_BASE}/api/catalogs/${APIC_ORG}/${APIC_CATALOG}/apis?stage=true"
          curl -fsS -X POST "$PUB_URL" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/yaml" \
            --data-binary @"${API_FILE}" \
            -o /tmp/api-publish.json
          cat /tmp/api-publish.json | jq .
