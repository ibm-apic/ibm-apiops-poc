name: APIC Deploy via REST

on:
  workflow_dispatch:
    inputs:
      api_file:
        description: "Path to API YAML"
        default: "apis/hello-proxy.yaml"
        required: true
      product_file:
        description: "Path to Product YAML (optional)"
        default: "products/hello-product.yaml"
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APIC_BASE: ${{ secrets.APIC_BASE }}        # e.g. https://env9559876.a-vir-c1.apiconnect.ipaas.automation.ibm.com/manager
      APIC_USERNAME: ${{ secrets.APIC_USERNAME }}
      APIC_PASSWORD: ${{ secrets.APIC_PASSWORD }}
      APIC_ORG: ${{ secrets.APIC_ORG }}          # e.g. try-ai
      APIC_CATALOG: ${{ secrets.APIC_CATALOG }}  # e.g. sandbox

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show inputs
        run: |
          echo "API:     ${{ github.event.inputs.api_file }}"
          echo "Product: ${{ github.event.inputs.product_file }}"

      # 🔐 Authenticate with APIC (Basic or Cookie mode)
      - name: Get APIC auth (basic/cookie)
        id: auth
        run: |
          set -euo pipefail
          BASE="${APIC_BASE}"
          USER="${APIC_USERNAME}"
          PASS="${APIC_PASSWORD}"

          echo "🔎 Checking Basic authentication..."
          STATUS=$(curl -sk -o /dev/null -w "%{http_code}" -u "$USER:$PASS" "$BASE/api/orgs")
          if [ "$STATUS" = "200" ]; then
            echo "✅ Using Basic authentication"
            echo "mode=basic" >> $GITHUB_OUTPUT
            echo "curl_auth=-u '${USER}:${PASS}'" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "🔎 Trying Cookie-based authentication..."
          COOKIE=/tmp/apic_cookie.txt
          LOGIN_STATUS=$(curl -sk -o /dev/null -w "%{http_code}" \
            -c "$COOKIE" -b "$COOKIE" \
            -X POST "$BASE/login" \
            -H 'Content-Type: application/json' \
            --data "{\"username\":\"$USER\",\"password\":\"$PASS\"}")

          if [ "$LOGIN_STATUS" = "200" ] || [ "$LOGIN_STATUS" = "204" ]; then
            STATUS=$(curl -sk -o /dev/null -w "%{http_code}" -c "$COOKIE" -b "$COOKIE" "$BASE/api/orgs")
            if [ "$STATUS" = "200" ]; then
              echo "✅ Using Cookie authentication"
              echo "mode=cookie" >> $GITHUB_OUTPUT
              echo "cookie_path=$COOKIE" >> $GITHUB_OUTPUT
              echo "curl_auth=-c '$COOKIE' -b '$COOKIE'" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          echo "::error::Authentication failed (basic and cookie both failed). Check APIC_BASE/credentials."
          exit 1

      # 🧩 Create or Update Draft API
      - name: Create/Update Draft API
        run: |
          set -euo pipefail
          API_FILE="${{ github.event.inputs.api_file }}"
          CREATE_URL="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/draft-apis?replace=true"
          echo "📦 Deploying API Draft: $API_FILE"
          curl -fsS -X POST ${{ steps.auth.outputs.curl_auth }} \
            -H "Content-Type: application/yaml" \
            --data-binary @"$API_FILE" \
            "$CREATE_URL" -o /tmp/draft-api.json
          echo "✅ Draft API Created/Updated:"
          cat /tmp/draft-api.json | jq .

      # 📦 Create or Update Draft Product (if provided)
      - name: Create/Update Draft Product (optional)
        if: ${{ github.event.inputs.product_file != '' }}
        run: |
          set -euo pipefail
          PRODUCT_FILE="${{ github.event.inputs.product_file }}"
          CREATE_URL="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/draft-products?replace=true"
          echo "📦 Deploying Product Draft: $PRODUCT_FILE"
          curl -fsS -X POST ${{ steps.auth.outputs.curl_auth }} \
            -H "Content-Type: application/yaml" \
            --data-binary @"$PRODUCT_FILE" \
            "$CREATE_URL" -o /tmp/draft-product.json
          echo "✅ Draft Product Created/Updated:"
          cat /tmp/draft-product.json | jq .

      # 🚀 Publish Product to Catalog
      - name: Publish Product to catalog (contains the API)
        if: ${{ github.event.inputs.product_file != '' }}
        run: |
          set -euo pipefail
          PRODUCT_FILE="${{ github.event.inputs.product_file }}"
          PUB_URL="${APIC_BASE}/api/catalogs/${APIC_ORG}/${APIC_CATALOG}/products?stage=true"
          echo "🚀 Publishing Product to catalog: ${APIC_CATALOG}"
          curl -fsS -X POST ${{ steps.auth.outputs.curl_auth }} \
            -H "Content-Type: application/yaml" \
            --data-binary @"$PRODUCT_FILE" \
            "$PUB_URL" -o /tmp/publish.json
          echo "✅ Product Published:"
          cat /tmp/publish.json | jq .

      # 🚀 Publish API directly if no Product provided
      - name: Publish API directly (if no product)
        if: ${{ github.event.inputs.product_file == '' }}
        run: |
          set -euo pipefail
          API_FILE="${{ github.event.inputs.api_file }}"
          PUB_URL="${APIC_BASE}/api/catalogs/${APIC_ORG}/${APIC_CATALOG}/apis?stage=true"
          echo "🚀 Publishing API directly to catalog: ${APIC_CATALOG}"
          curl -fsS -X POST ${{ steps.auth.outputs.curl_auth }} \
            -H "Content-Type: application/yaml" \
            --data-binary @"${API_FILE}" \
            "$PUB_URL" -o /tmp/api-publish.json
          echo "✅ API Published:"
          cat /tmp/api-publish.json | jq .
