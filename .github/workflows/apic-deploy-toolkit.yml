name: APIC Deploy via Toolkit

on:
  workflow_dispatch:
    inputs:
      api_file:
        description: "Path to API YAML"
        default: "apis/hello-proxy.yaml"
        required: true
      product_file:
        description: "Path to Product YAML"
        default: "products/hello-product.yaml"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # Example: https://envxxxxx.a-vir-c1.apiconnect.ipaas.automation.ibm.com/manager
      APIC_BASE:     ${{ secrets.APIC_BASE }}
      APIC_USERNAME: ${{ secrets.APIC_USERNAME }}
      APIC_PASSWORD: ${{ secrets.APIC_PASSWORD }}
      APIC_ORG:      ${{ secrets.APIC_ORG }}       # e.g. try-ai
      APIC_CATALOG:  ${{ secrets.APIC_CATALOG }}   # e.g. sandbox
      APIC_REALM:    provider/default-idp-2        # adjust if your realm differs
      TOOLKIT_IMAGE: cp.icr.io/cp/apic/apic-toolkit:10.0.8.0


    steps:
      - uses: actions/checkout@v4

      - name: Guard required secrets
        run: |
          set -euo pipefail
          for v in APIC_BASE APIC_USERNAME APIC_PASSWORD APIC_ORG APIC_CATALOG; do
            [ -n "${!v:-}" ] || { echo "::error::Missing env $v"; exit 1; }
          done
          [ -n "${{ secrets.IBM_ENTITLEMENT_KEY }}" ] || { echo "::error::Missing secret IBM_ENTITLEMENT_KEY"; exit 1; }

      - name: Install APIC Toolkit (public tarball)
        run: |
          set -euo pipefail
          echo "ðŸ“¦ Downloading IBM API Connect Toolkit..."
          curl -fsSL \
            https://apic-github-files.s3.eu.cloud-object-storage.appdomain.cloud/toolkit/10.0.8.0/apic-toolkit-linux.tgz \
            -o /tmp/apic-toolkit.tgz
          sudo mkdir -p /usr/local/apic
          sudo tar -xzf /tmp/apic-toolkit.tgz -C /usr/local/apic
          sudo ln -s /usr/local/apic/apic /usr/local/bin/apic
          apic version


      - name: Login to APIC
        run: |
          set -euo pipefail
          ${{ steps.toolkit.outputs.apic_cmd }} login \
            --server  "${APIC_BASE}" \
            --username "${APIC_USERNAME}" \
            --password "${APIC_PASSWORD}" \
            --realm    "${APIC_REALM}" \
            --accept-license

      - name: Push draft API (create or update)
        run: |
          set -euo pipefail
          API_FILE="${{ github.event.inputs.api_file }}"
          # Try create, fall back to update
          if ! ${{ steps.toolkit.outputs.apic_cmd }} drafts:apis:create "${API_FILE}" \
                --server "${APIC_BASE}" --org "${APIC_ORG}" --accept-license ; then
            ${{ steps.toolkit.outputs.apic_cmd }} drafts:apis:update "${API_FILE}" \
                --server "${APIC_BASE}" --org "${APIC_ORG}" --accept-license
          fi

      - name: Push draft Product (create or update)
        run: |
          set -euo pipefail
          PRODUCT_FILE="${{ github.event.inputs.product_file }}"
          if ! ${{ steps.toolkit.outputs.apic_cmd }} drafts:products:create "${PRODUCT_FILE}" \
                --server "${APIC_BASE}" --org "${APIC_ORG}" --accept-license ; then
            ${{ steps.toolkit.outputs.apic_cmd }} drafts:products:update "${PRODUCT_FILE}" \
                --server "${APIC_BASE}" --org "${APIC_ORG}" --accept-license
          fi

      - name: Publish product to catalog (stage)
        run: |
          set -euo pipefail
          PRODUCT_FILE="${{ github.event.inputs.product_file }}"
          ${{ steps.toolkit.outputs.apic_cmd }} products:publish "${PRODUCT_FILE}" \
            --server "${APIC_BASE}" \
            --org "${APIC_ORG}" \
            --catalog "${APIC_CATALOG}" \
            --stage \
            --accept-license
