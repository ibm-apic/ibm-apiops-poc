name: APIC Export via REST

on:
  workflow_dispatch:
    inputs:
      api_name:
        description: "API name to export (e.g., hello-proxy)"
        default: "hello-proxyy"
        required: true
      api_version:
        description: "API version (e.g., 1.0.0)"
        default: "1.0.0"
        required: true
      product_name:
        description: "Product name (optional)"
        default: "hello-productt"
        required: false
      product_version:
        description: "Product version (optional)"
        default: "1.0.0"
        required: false

jobs:
  export:
    runs-on: ubuntu-latest
    env:
      APIC_BASE:     ${{ secrets.APIC_BASE }}
      APIC_USERNAME: ${{ secrets.APIC_USERNAME }}
      APIC_PASSWORD: ${{ secrets.APIC_PASSWORD }}
      APIC_ORG:      ${{ secrets.APIC_ORG }}
      APIC_CATALOG:  ${{ secrets.APIC_CATALOG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 🔐 Authenticate with APIC (Basic or Cookie mode)
      - name: Get APIC auth (basic/cookie)
        id: auth
        run: |
          set -euo pipefail
          BASE="${APIC_BASE}"
          USER="${APIC_USERNAME}"
          PASS="${APIC_PASSWORD}"

          echo "🔎 Checking Basic authentication..."
          STATUS=$(curl -sk -o /dev/null -w "%{http_code}" -u "$USER:$PASS" "$BASE/api/orgs")
          if [ "$STATUS" = "200" ]; then
            echo "✅ Using Basic authentication"
            echo "mode=basic" >> $GITHUB_OUTPUT
            # store a reusable curl auth snippet
            printf "curl_auth=-u '%s:%s'\n" "$USER" "$PASS" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "🔎 Trying Cookie-based authentication..."
          COOKIE=/tmp/apic_cookie.txt
          LOGIN_STATUS=$(curl -sk -o /dev/null -w "%{http_code}" \
            -c "$COOKIE" -b "$COOKIE" \
            -X POST "$BASE/login" \
            -H 'Content-Type: application/json' \
            --data "{\"username\":\"$USER\",\"password\":\"$PASS\"}")

          if [ "$LOGIN_STATUS" = "200" ] || [ "$LOGIN_STATUS" = "204" ]; then
            STATUS=$(curl -sk -o /dev/null -w "%{http_code}" -c "$COOKIE" -b "$COOKIE" "$BASE/api/orgs")
            if [ "$STATUS" = "200" ]; then
              echo "✅ Using Cookie authentication"
              echo "mode=cookie" >> $GITHUB_OUTPUT
              echo "cookie_path=$COOKIE" >> $GITHUB_OUTPUT
              echo "curl_auth=-c '$COOKIE' -b '$COOKIE'" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          echo "::error::Authentication failed (basic and cookie both failed). Check APIC_BASE/credentials."
          exit 1

      - name: Prepare folders
        run: mkdir -p export/apis export/products export/catalog

      - name: Export draft API as YAML (with fallbacks)
        run: |
          set -euo pipefail
          API_NAME="${{ github.event.inputs.api_name }}"
          API_VER="${{ github.event.inputs.api_version }}"
          OUT="export/apis/${API_NAME}_${API_VER}.yaml"

          ep1="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/draft-apis/${API_NAME}:${API_VER}?format=yaml"
          ep2="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/apis/${API_NAME}:${API_VER}?format=yaml"
          ep3="${APIC_BASE}/api/catalogs/${APIC_ORG}/${APIC_CATALOG}/apis/${API_NAME}:${API_VER}?format=yaml"

          try_get() {
            local url="$1"
            echo "➡️  GET $url"
            # -f to fail on >=400; Accept header for YAML
            if curl -fsS ${{ steps.auth.outputs.curl_auth }} \
                 -H "Accept: application/yaml" \
                 -o "$OUT" "$url"; then
              echo "✅ Saved $OUT"
              head -n 20 "$OUT" || true
              return 0
            fi
            return 1
          }

          if try_get "$ep1"; then exit 0; fi
          if try_get "$ep2"; then exit 0; fi
          if try_get "$ep3"; then exit 0; fi

          echo "::error::Could not export API ${API_NAME}:${API_VER} from drafts or catalog."
          exit 1

      - name: Export draft Product as YAML (optional, with fallbacks)
        if: ${{ github.event.inputs.product_name != '' }}
        run: |
          set -euo pipefail
          PROD="${{ github.event.inputs.product_name }}"
          PVER="${{ github.event.inputs.product_version }}"
          OUT="export/products/${PROD}_${PVER}.yaml"

          ep1="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/draft-products/${PROD}:${PVER}?format=yaml"
          ep2="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/products/${PROD}:${PVER}?format=yaml"
          ep3="${APIC_BASE}/api/catalogs/${APIC_ORG}/${APIC_CATALOG}/products/${PROD}:${PVER}?format=yaml"

          try_get() {
            local url="$1"
            echo "➡️  GET $url"
            if curl -fsS ${{ steps.auth.outputs.curl_auth }} \
                 -H "Accept: application/yaml" \
                 -o "$OUT" "$url"; then
              echo "✅ Saved $OUT"
              head -n 20 "$OUT" || true
              return 0
            fi
            return 1
          }

          if try_get "$ep1"; then exit 0; fi
          if try_get "$ep2"; then exit 0; fi
          if try_get "$ep3"; then exit 0; fi

          echo "::warning::Could not export Product ${PROD}:${PVER}. Continuing."
          exit 0

      - name: Export catalog summary (JSON) for portability hints
        run: |
          set -euo pipefail
          META="export/catalog/${APIC_CATALOG}.json"
          URL="${APIC_BASE}/api/catalogs/${APIC_ORG}/${APIC_CATALOG}"

          # capture headers to verify JSON
          HDR=/tmp/hdr.txt
          curl -sS -D "$HDR" -o "$META" ${{ steps.auth.outputs.curl_auth }} "$URL" || {
            echo "::warning::Catalog summary fetch failed."
            exit 0
          }

          if grep -i "content-type: application/json" "$HDR" >/dev/null; then
            echo "✅ Catalog JSON saved at $META"
            head -n 40 "$META" | sed 's/./&/g' | head -n 40 >/dev/null  # noop to keep step short
            jq '.' "$META" | head -n 40
          else
            echo "::warning::Response was not JSON (likely HTML). Skipping jq pretty-print."
            head -n 20 "$META" || true
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: apic-export
          path: export/
