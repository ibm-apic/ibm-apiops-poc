name: APIC Export via REST
on:
  workflow_dispatch:
    inputs:
      api_name:
        description: "API name to export (e.g., hello-proxy)"
        default: "hello-proxy"
        required: true
      api_version:
        description: "API version (e.g., 1.0.0)"
        default: "1.0.0"
        required: true
      product_name:
        description: "Product name (optional)"
        default: "hello-product"
        required: false
      product_version:
        description: "Product version (optional)"
        default: "1.0.0"
        required: false

jobs:
  export:
    runs-on: ubuntu-latest
    env:
      APIC_BASE: ${{ secrets.APIC_BASE }}
      APIC_USERNAME: ${{ secrets.APIC_USERNAME }}
      APIC_PASSWORD: ${{ secrets.APIC_PASSWORD }}
      APIC_ORG: ${{ secrets.APIC_ORG }}
      APIC_CATALOG: ${{ secrets.APIC_CATALOG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 🔐 Authenticate with APIC (Basic or Cookie mode)
      - name: Get APIC auth (basic/cookie)
        id: auth
        run: |
          set -euo pipefail
          BASE="${APIC_BASE}"
          USER="${APIC_USERNAME}"
          PASS="${APIC_PASSWORD}"

          echo "🔎 Checking Basic authentication..."
          STATUS=$(curl -sk -o /dev/null -w "%{http_code}" -u "$USER:$PASS" "$BASE/api/orgs")
          if [ "$STATUS" = "200" ]; then
            echo "✅ Using Basic authentication"
            echo "mode=basic" >> $GITHUB_OUTPUT
            echo "curl_auth=-u '${USER}:${PASS}'" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "🔎 Trying Cookie-based authentication..."
          COOKIE=/tmp/apic_cookie.txt
          LOGIN_STATUS=$(curl -sk -o /dev/null -w "%{http_code}" \
            -c "$COOKIE" -b "$COOKIE" \
            -X POST "$BASE/login" \
            -H 'Content-Type: application/json' \
            --data "{\"username\":\"$USER\",\"password\":\"$PASS\"}")

          if [ "$LOGIN_STATUS" = "200" ] || [ "$LOGIN_STATUS" = "204" ]; then
            STATUS=$(curl -sk -o /dev/null -w "%{http_code}" -c "$COOKIE" -b "$COOKIE" "$BASE/api/orgs")
            if [ "$STATUS" = "200" ]; then
              echo "✅ Using Cookie authentication"
              echo "mode=cookie" >> $GITHUB_OUTPUT
              echo "cookie_path=$COOKIE" >> $GITHUB_OUTPUT
              echo "curl_auth=-c '$COOKIE' -b '$COOKIE'" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          echo "::error::Authentication failed (basic and cookie both failed). Check APIC_BASE/credentials."
          exit 1

      - name: Export draft API as YAML
        env:
          TOKEN: ${{ steps.token.outputs.token }}
        run: |
          set -euo pipefail
          mkdir -p export/apis export/products export/catalog
          # Typical GET pattern:
          #   GET /api/orgs/{org}/drafts/draft-apis/{name}:{version}?format=yaml
          API_NAME="${{ github.event.inputs.api_name }}"
          API_VER="${{ github.event.inputs.api_version }}"
          GET_API_URL="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/draft-apis/${API_NAME}:${API_VER}?format=yaml"
          curl -fsS -H "Authorization: Bearer $TOKEN" "$GET_API_URL" -o "export/apis/${API_NAME}_${API_VER}.yaml"
          echo "Saved export/apis/${API_NAME}_${API_VER}.yaml"
          echo "----"; head -n 20 "export/apis/${API_NAME}_${API_VER}.yaml" || true

      - name: Export draft Product as YAML (optional)
        if: ${{ github.event.inputs.product_name != '' }}
        env:
          TOKEN: ${{ steps.token.outputs.token }}
        run: |
          set -euo pipefail
          PROD="${{ github.event.inputs.product_name }}"
          PVER="${{ github.event.inputs.product_version }}"
          GET_PROD_URL="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/draft-products/${PROD}:${PVER}?format=yaml"
          curl -fsS -H "Authorization: Bearer $TOKEN" "$GET_PROD_URL" -o "export/products/${PROD}_${PVER}.yaml"
          echo "Saved export/products/${PROD}_${PVER}.yaml"
          echo "----"; head -n 20 "export/products/${PROD}_${PVER}.yaml" || true

      - name: Export catalog summary (for portability hints)
        env:
          TOKEN: ${{ steps.token.outputs.token }}
        run: |
          set -euo pipefail
          # Helpful metadata if you want to recreate the target catalog elsewhere
          curl -fsS -H "Authorization: Bearer $TOKEN" \
            "${APIC_BASE}/api/catalogs/${APIC_ORG}/${APIC_CATALOG}" \
            -o export/catalog/${APIC_CATALOG}.json
          jq '.' export/catalog/${APIC_CATALOG}.json | head -n 40

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: apic-export
          path: export/
