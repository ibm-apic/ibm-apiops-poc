name: APIC Export (pure specs)

on:
  workflow_dispatch:
    inputs:
      scope:
        description: "draft or catalog"
        required: true
        default: "draft"
      api_name:
        description: "API name (e.g. hello-proxyy)"
        default: "hello-proxyy"
        required: true
      api_version:
        description: "API version (e.g. 1.0.0)"
        default: "1.0.0"
        required: true
      product_name:
        description: "Product name (optional)"
        default: "hello-productt"
        required: false
      product_version:
        description: "Product version (optional)"
        default: "1.0.0"
        required: false

jobs:
  export:
    runs-on: ubuntu-latest
    env:
      APIC_BASE:     ${{ secrets.APIC_BASE }}
      APIC_USERNAME: ${{ secrets.APIC_USERNAME }}
      APIC_PASSWORD: ${{ secrets.APIC_PASSWORD }}
      APIC_ORG:      ${{ secrets.APIC_ORG }}
      APIC_CATALOG:  ${{ secrets.APIC_CATALOG }}
    steps:
      - uses: actions/checkout@v4

      # 🔐 Reuse the working auth mode (basic or cookie)
      - name: Get APIC auth (basic/cookie)
        id: auth
        run: |
          set -euo pipefail
          BASE="${APIC_BASE}"; USER="${APIC_USERNAME}"; PASS="${APIC_PASSWORD}"

          # Try Basic
          if [ "$(curl -sk -o /dev/null -w '%{http_code}' -u "$USER:$PASS" "$BASE/api/orgs")" = "200" ]; then
            echo "curl_auth=-u '${USER}:${PASS}'" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Try Cookie
          COOKIE=/tmp/apic_cookie.txt
          code=$(curl -sk -o /dev/null -w '%{http_code}' -c "$COOKIE" -b "$COOKIE" \
                   -X POST "$BASE/login" -H 'Content-Type: application/json' \
                   --data "{\"username\":\"$USER\",\"password\":\"$PASS\"}")
          if [ "$code" = "200" ] || [ "$code" = "204" ]; then
            if [ "$(curl -sk -o /dev/null -w '%{http_code}' -c "$COOKIE" -b "$COOKIE" "$BASE/api/orgs")" = "200" ]; then
              echo "curl_auth=-c '$COOKIE' -b '$COOKIE'" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          echo "::error::Auth failed. Check APIC_BASE/credentials."
          exit 1

      - name: Export API YAML
        run: |
          set -euo pipefail
          mkdir -p export/apis export/products

          SCOPE="${{ github.event.inputs.scope }}"
          API="${{ github.event.inputs.api_name }}"
          VER="${{ github.event.inputs.api_version }}"

          if [ "$SCOPE" = "catalog" ]; then
            URL="${APIC_BASE}/api/catalogs/${APIC_ORG}/${APIC_CATALOG}/apis/${API}:${VER}?format=yaml"
          else
            URL="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/draft-apis/${API}:${VER}?format=yaml"
          fi

          echo "→ GET $URL"
          if ! curl -fsS ${{ steps.auth.outputs.curl_auth }} \
               -H "Accept: application/yaml" "$URL" \
               -o "export/apis/${API}_${VER}.yaml"; then
            echo "::error::API not found or not accessible at $URL"
            exit 1
          fi
          echo "Saved export/apis/${API}_${VER}.yaml"
          head -n 20 "export/apis/${API}_${VER}.yaml" || true

      - name: Export Product YAML (optional)
        if: ${{ github.event.inputs.product_name != '' }}
        run: |
          set -euo pipefail
          SCOPE="${{ github.event.inputs.scope }}"
          PROD="${{ github.event.inputs.product_name }}"
          PVER="${{ github.event.inputs.product_version }}"

          if [ "$SCOPE" = "catalog" ]; then
            URL="${APIC_BASE}/api/catalogs/${APIC_ORG}/${APIC_CATALOG}/products/${PROD}:${PVER}?format=yaml"
          else
            URL="${APIC_BASE}/api/orgs/${APIC_ORG}/drafts/draft-products/${PROD}:${PVER}?format=yaml"
          fi

          echo "→ GET $URL"
          if ! curl -fsS ${{ steps.auth.outputs.curl_auth }} \
               -H "Accept: application/yaml" "$URL" \
               -o "export/products/${PROD}_${PVER}.yaml"; then
            echo "::error::Product not found or not accessible at $URL"
            exit 1
          fi
          echo "Saved export/products/${PROD}_${PVER}.yaml"
          head -n 20 "export/products/${PROD}_${PVER}.yaml" || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apic-specs
          path: export/
